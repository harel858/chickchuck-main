generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  phone            String?
  profileSrc       String?
  appointments     Appointment[]
  availableSlots   AvailableSlot[]
  appointmentSlots AppointmentSlot[]
  Treatment        Treatment[]
  isAdmin          Boolean
  PremiumKit       PremiumKits       @default(Light)
  Business         Business[]
}

model Business {
  id            String          @id @default(uuid())
  businessName  String          @unique
  openingTime   String?
  closingTime   String?
  businessImage String?
  user          User[]
  activityDays  Int[]
  Address       Address[]
  AvailableSlot AvailableSlot[]
}

model Address {
  id         String    @id @default(uuid())
  city       String
  street     String
  zipcode    String
  Business   Business? @relation(fields: [businessId], references: [id])
  businessId String?
}

model Appointment {
  id                String            @id @default(uuid())
  customer          Customer          @relation(fields: [customerId], references: [id])
  customerId        String
  appointmentSlot   AppointmentSlot   @relation(fields: [appointmentSlotId], references: [id])
  appointmentSlotId String            @unique
  treatment         Treatment         @relation(fields: [treatmentId], references: [id])
  treatmentId       String
  status            AppointmentStatus
  notes             String?
  createdAt         DateTime          @default(now())
  User              User              @relation(fields: [userId], references: [id])
  userId            String
}

model Customer {
  id           String        @id @default(uuid())
  name         String
  phoneNumber  String        @unique
  appointments Appointment[]
}

model Treatment {
  id           String        @id @default(uuid())
  title        String
  cost         Int
  duration     Int
  business     User          @relation(fields: [businessId], references: [id])
  businessId   String
  appointments Appointment[]
}

model AvailableSlot {
  id              String            @id @default(uuid())
  start           String
  end             String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  AppointmentSlot AppointmentSlot[]
  business        Business          @relation(fields: [businessId], references: [id])
  businessId      String
}

model AppointmentSlot {
  id             String          @id @default(uuid())
  start          String
  end            String
  date           String
  business       User            @relation(fields: [businessId], references: [id])
  businessId     String
  availableSlots AvailableSlot[]
  appointments   Appointment[]
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PremiumKits {
  Light
  Pro
  ProPlus
}
