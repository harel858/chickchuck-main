generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  accounts          Account[]
  sessions          Session[]
  password          String?
  phone             String?             @unique
  startActivity     String?
  endActivity       String?
  activityDays      Int[]
  TypeOfWage        TypeOfWage          @default(HOURLY)
  Wage              String?
  UserRole          UserRole?           @default(RECIPIENT)
  appointments      Appointment[]
  availableSlots    AvailableSlot[]
  appointmentSlots  AppointmentSlot[]
  Treatment         Treatment[]
  isAdmin           Boolean?
  PremiumKit        PremiumKits         @default(Light)
  Business          Business?           @relation(fields: [businessId], references: [id])
  businessId        String?
  Customer          Customer[]
  BreakTime         BreakTime[]
  CustomAppointment CustomAppointment[]
  Break             Break[]

  @@map("users")
}

model Images {
  id                String   @id @default(uuid())
  profileImgName    String?
  backgroundImgName String?
  Business          Business @relation(fields: [businessId], references: [id])
  businessId        String   @unique
}

model RequiredDocument {
  id         String      @id @default(uuid())
  name       String
  treatment  Treatment[]
  Business   Business    @relation(fields: [businessId], references: [id])
  businessId String
}

model BreakTime {
  id            String          @id @default(uuid())
  StartTime     String
  EndTime       String
  AvailableSlot AvailableSlot[]
  user          User[]
  Business      Business        @relation(fields: [businessId], references: [id])
  businessId    String
}

model Document {
  id           String   @id @default(uuid())
  documentName String
  documentType String // You can specify types like "Document," "Certification," etc.
  documentURL  String // You can store the URL or file path to the document
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   String
}

model Business {
  id                String              @id @default(uuid())
  businessName      String              @unique
  phone             String              @unique
  openingTime       String
  closingTime       String
  businessImage     String?
  user              User[]
  activityDays      Int[]
  Customer          Customer[]
  AvailableSlot     AvailableSlot[]
  Address           Address[]
  Appointment       Appointment[]
  AppointmentSlot   AppointmentSlot[]
  Images            Images?
  blockedCustomers  Customer[]          @relation("BlockedCustomers")
  Treatment         Treatment[]
  RequiredDocument  RequiredDocument[]
  BreakTime         BreakTime[]
  CustomAppointment CustomAppointment[]
  Break             Break[]
}

model Address {
  id         String   @id @default(uuid())
  city       String
  street     String
  zipcode    String?
  Business   Business @relation(fields: [businessId], references: [id])
  businessId String
}

model Appointment {
  id                String            @id @default(uuid())
  customer          Customer          @relation(fields: [customerId], references: [id])
  customerId        String
  appointmentSlot   AppointmentSlot   @relation(fields: [appointmentSlotId], references: [id])
  appointmentSlotId String            @unique
  treatment         Treatment         @relation(fields: [treatmentId], references: [id])
  treatmentId       String
  status            AppointmentStatus
  notes             String?
  createdAt         DateTime          @default(now())
  User              User              @relation(fields: [userId], references: [id])
  userId            String
  Business          Business          @relation(fields: [businessId], references: [id])
  businessId        String
}

model CustomAppointment {
  id                String            @id @default(uuid())
  Title             String
  customer          Customer          @relation(fields: [customerId], references: [id])
  customerId        String
  appointmentSlot   AppointmentSlot   @relation(fields: [appointmentSlotId], references: [id])
  appointmentSlotId String            @unique
  status            AppointmentStatus
  notes             String?
  createdAt         DateTime          @default(now())
  User              User              @relation(fields: [userId], references: [id])
  userId            String
  Business          Business          @relation(fields: [businessId], references: [id])
  businessId        String
}

model Customer {
  id                String              @id @default(uuid())
  name              String
  phoneNumber       String              @unique
  UserRole          UserRole            @default(CUSTOMER)
  User              User[]
  appointments      Appointment[]
  Business          Business[]
  blockedByBusiness Business[]          @relation("BlockedCustomers")
  Documents         Document[]
  CustomAppointment CustomAppointment[]
}

model Treatment {
  id               String             @id @default(uuid())
  title            String             @unique
  cost             Int
  duration         Int
  advancePayment   Int? // New field for advance payment amount
  user             User[]
  business         Business           @relation(fields: [businessId], references: [id])
  businessId       String
  appointments     Appointment[]
  RequiredDocument RequiredDocument[]
}

model AvailableSlot {
  id              String            @id @default(uuid())
  start           String
  end             String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  AppointmentSlot AppointmentSlot[]
  Business        Business?         @relation(fields: [businessId], references: [id])
  businessId      String?
  BreakTime       BreakTime?        @relation(fields: [breakTimeId], references: [id])
  breakTimeId     String?
}

model Break {
  id                String          @id @default(uuid())
  startTime         String
  endTime           String
  date              String
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  appointmentSlot   AppointmentSlot @relation(fields: [appointmentSlotId], references: [id])
  appointmentSlotId String          @unique
  business          Business        @relation(fields: [businessId], references: [id])
  businessId        String
}

model AppointmentSlot {
  id                String             @id @default(uuid())
  start             String
  end               String
  date              String
  business          Business           @relation(fields: [businessId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  availableSlots    AvailableSlot[]
  appointments      Appointment[]
  userId            String
  businessId        String
  CustomAppointment CustomAppointment?
  Break             Break?
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum UserRole {
  CUSTOMER
  RECIPIENT
}

enum TypeOfWage {
  GLOBALY
  HOURLY
}

enum PremiumKits {
  Light
  Pro
  ProPlus
}
