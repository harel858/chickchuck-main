generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  phone            String?
  startActivity    String
  endActivity      String
  activityDays     Int[]
  UserRole         UserRole          @default(RECIPIENT)
  appointments     Appointment[]
  availableSlots   AvailableSlot[]
  appointmentSlots AppointmentSlot[]
  Treatment        Treatment[]
  isAdmin          Boolean
  PremiumKit       PremiumKits       @default(Light)
  Business         Business?         @relation(fields: [businessId], references: [id])
  businessId       String?
  Customer         Customer[]
}

model Images {
  id                String   @id @default(uuid())
  profileImgName    String?
  backgroundImgName String?
  Business          Business @relation(fields: [businessId], references: [id])
  businessId        String   @unique
}

model RequiredDocument {
  id         String      @id @default(uuid())
  name       String
  treatment  Treatment[]
  Business   Business    @relation(fields: [businessId], references: [id])
  businessId String
}

model Document {
  id           String   @id @default(uuid())
  documentName String
  documentType String // You can specify types like "Document," "Certification," etc.
  documentURL  String // You can store the URL or file path to the document
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   String
  business     Business @relation(fields: [businessId], references: [id])
  businessId   String
}

model Business {
  id               String             @id @default(uuid())
  businessName     String             @unique
  phone            String             @unique
  openingTime      String
  closingTime      String
  businessImage    String?
  user             User[]
  activityDays     Int[]
  Customer         Customer[]
  AvailableSlot    AvailableSlot[]
  Address          Address[]
  Appointment      Appointment[]
  AppointmentSlot  AppointmentSlot[]
  Images           Images?
  blockedCustomers Customer[]         @relation("BlockedCustomers")
  Document         Document[]
  Treatment        Treatment[]
  RequiredDocument RequiredDocument[]
}

model Address {
  id         String   @id @default(uuid())
  city       String
  street     String
  zipcode    String?
  Business   Business @relation(fields: [businessId], references: [id])
  businessId String
}

model Appointment {
  id                String            @id @default(uuid())
  customer          Customer          @relation(fields: [customerId], references: [id])
  customerId        String
  appointmentSlot   AppointmentSlot   @relation(fields: [appointmentSlotId], references: [id])
  appointmentSlotId String            @unique
  treatment         Treatment         @relation(fields: [treatmentId], references: [id])
  treatmentId       String
  status            AppointmentStatus
  notes             String?
  createdAt         DateTime          @default(now())
  User              User              @relation(fields: [userId], references: [id])
  userId            String
  Business          Business          @relation(fields: [businessId], references: [id])
  businessId        String
}

model Customer {
  id                String        @id @default(uuid())
  name              String
  phoneNumber       String        @unique
  UserRole          UserRole      @default(CUSTOMER)
  User              User[]
  appointments      Appointment[]
  Business          Business[]
  blockedByBusiness Business[]    @relation("BlockedCustomers")
  Documents         Document[]
}

model Treatment {
  id               String             @id @default(uuid())
  title            String             @unique
  cost             Int
  duration         Int
  advancePayment   Int? // New field for advance payment amount
  user             User[]
  business         Business           @relation(fields: [businessId], references: [id])
  businessId       String
  appointments     Appointment[]
  RequiredDocument RequiredDocument[]
}

model AvailableSlot {
  id              String            @id @default(uuid())
  start           String
  end             String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  AppointmentSlot AppointmentSlot[]
  Business        Business?         @relation(fields: [businessId], references: [id])
  businessId      String?
}

model AppointmentSlot {
  id             String          @id @default(uuid())
  start          String
  end            String
  date           String
  business       Business        @relation(fields: [businessId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  availableSlots AvailableSlot[]
  appointments   Appointment[]
  userId         String
  businessId     String
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum UserRole {
  CUSTOMER
  RECIPIENT
}

enum PremiumKits {
  Light
  Pro
  ProPlus
}
