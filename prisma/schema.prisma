generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL_DEV")
    relationMode = "foreignKeys"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @unique @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    syncToken         String?
    resourceId        String?
    channelId         String?
    watchExpired      String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model User {
    id            String         @id @default(cuid())
    name          String
    email         String?        @unique
    emailVerified DateTime?      @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String?
    phone         String?        @unique
    startActivity String?
    endActivity   String?
    activityDays  ActivityDays[]
    TypeOfWage    TypeOfWage     @default(HOURLY)
    Wage          String?
    UserRole      UserRole?      @default(RECIPIENT)
    Treatment     Treatment[]
    isAdmin       Boolean?
    PremiumKit    PremiumKits    @default(Light)
    Business      Business?      @relation(fields: [businessId], references: [id])
    businessId    String?
    Customer      Customer[]
    calendarId    String?
    accountId     String?

    @@map("users")
}

model Images {
    id                String   @id @default(uuid())
    profileImgName    String?
    backgroundImgName String?
    Business          Business @relation(fields: [businessId], references: [id])
    businessId        String
}

model RequiredDocument {
    id         String      @id @default(uuid())
    name       String
    treatment  Treatment[]
    Business   Business    @relation(fields: [businessId], references: [id])
    businessId String
}

model Document {
    id           String   @id @default(uuid())
    documentName String
    documentType String // You can specify types like "Document," "Certification," etc.
    documentURL  String // You can store the URL or file path to the document
    customer     Customer @relation(fields: [customerId], references: [id])
    customerId   String
}

model ActivityDays {
    id         String    @id @default(uuid())
    day        Int
    start      String
    end        String
    isActive   Boolean
    Business   Business? @relation(fields: [businessId], references: [id])
    businessId String?
    User       User?     @relation(fields: [userId], references: [id])
    userId     String?
}

model Business {
    id               String             @id @default(uuid())
    businessName     String             @unique
    phone            String             @unique
    businessImage    String?
    BusinessType     BusinessType?
    LastCalendar     LastCalendar?
    ComeFrom         ComeFrom?
    user             User[]
    activityDays     ActivityDays[]
    Customer         Customer[]
    Address          String
    Images           Images[]
    blockedCustomers Customer[]         @relation("BlockedCustomers")
    Treatment        Treatment[]
    RequiredDocument RequiredDocument[]
}

model Customer {
    id                String     @id @default(uuid())
    name              String
    phoneNumber       String     @unique
    UserRole          UserRole   @default(CUSTOMER)
    User              User[]
    Business          Business[]
    blockedByBusiness Business[] @relation("BlockedCustomers")
    Documents         Document[]
}

model Treatment {
    id               String             @id @default(uuid())
    title            String             @unique
    cost             Int
    duration         Int
    advancePayment   Int? // New field for advance payment amount
    user             User[]
    business         Business           @relation(fields: [businessId], references: [id])
    businessId       String
    RequiredDocument RequiredDocument[]
}

enum AppointmentStatus {
    SCHEDULED
    CANCELLED
    COMPLETED
}

enum UserRole {
    CUSTOMER
    RECIPIENT
    TEAMMEATE
}

enum TypeOfWage {
    GLOBALY
    HOURLY
}

enum PremiumKits {
    Light
    Pro
    ProPlus
}

enum BusinessType {
    Barber
    TATTOO
    Beautician
    Manicurist
    BeautySalon
    MedicalClinic
    SpaAndWellnessCenter
    VeterinaryClinic
    Trainer
    DogGroomer
    Other
}

enum LastCalendar {
    PhysicalCalendar
    GoogleCalendar
    OtherSystem
    NONE
}

enum ComeFrom {
    InternetAdvertisement
    GoogleSearch
    Recommendation
    anotherBusiness
}
